package main

import (
	"bytes"
	"fmt"
	"os"
	"path/filepath"
	"regexp"
	"slices"
	"strings"

	"github.com/nomad-software/goat/internal/log"
	"github.com/nomad-software/goat/internal/tools/generate/cli"
	"github.com/nomad-software/goat/internal/tools/generate/env"
)

const (
	MethodPattern   = `(?ms)^//.*?func \(.*?\) (.*?)\(.*?\).*? {.*?}$`
	PackagePattern  = `(?m)^package [\w]+$`
	StubPattern     = `(?m)^.*?IGNORE$`
	ReceiverPattern = `(?m)el stub`
)

var (
	MethodRegex   = regexp.MustCompile(MethodPattern)
	PackageRegex  = regexp.MustCompile(PackagePattern)
	StubRegex     = regexp.MustCompile(StubPattern)
	ReceiverRegex = regexp.MustCompile(ReceiverPattern)
)

func main() {
	env := env.Parse()
	opt := cli.Parse()

	if err := opt.Valid(); err != nil {
		log.Panic(err, "options are not valid")
	}

	// fmt.Printf("args: %v\n", os.Args)
	// fmt.Printf("env: %#v\n", env)
	// fmt.Printf("opt: %#v\n", opt)

	fmt.Printf("generating: %s => %s\n", env.GoFile, opt.PkgName)

	path := filepath.Join(env.ProjectDir, env.CommonDir, opt.PkgName, opt.PkgFileName+".go")
	contents, err := os.ReadFile(path)
	if err != nil {
		log.Panic(err, "cannot read file")
	}

	// Remove unneeded methods.
	matches := MethodRegex.FindAllStringSubmatch(string(contents), -1)
	methods := make([]string, 0)
	if opt.Methods != "" {
		methods = strings.Split(opt.Methods, ",")
	}
	for _, match := range matches {
		if len(methods) > 0 && !slices.Contains(methods, match[1]) {
			// fmt.Printf("ignoring: %v\n", match[1])
			contents = bytes.ReplaceAll(contents, []byte(match[0]), []byte{})
		}
	}

	contents = PackageRegex.ReplaceAll(contents, []byte("// Code generated by tooling; DO NOT EDIT.\npackage "+env.GoPackage))
	contents = StubRegex.ReplaceAll(contents, []byte{})
	contents = ReceiverRegex.ReplaceAll(contents, []byte("el "+opt.Receiver))

	if opt.FileName != "" {
		path = filepath.Join(env.PkgDir, opt.FileName+"_"+opt.PkgFileName+".gen.go")
	} else {
		path = filepath.Join(env.PkgDir, env.GoPackage+"_"+opt.PkgFileName+".gen.go")
	}

	err = os.WriteFile(path, contents, 0666)
	if err != nil {
		log.Panic(err, "cannot read file")
	}
}
